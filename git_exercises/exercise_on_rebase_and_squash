Perfect 👍 let’s turn this into a **hands-on Git exercise** for you.

---

## 📝 Exercise: Squash all commits in a branch before rebasing on `main`

### Setup

1. Make sure you’re on your repo’s `main` branch.

   ```bash
   git checkout main
   ```

2. Create a new branch `feature-A` from `main`.

   ```bash
   git checkout -b feature-A
   ```

3. Make **3 commits** in this branch:

   ```bash
   echo "line1" > file.txt
   git add file.txt
   git commit -m "Add line1"

   echo "line2" >> file.txt
   git add file.txt
   git commit -m "Add line2"

   echo "line3" >> file.txt
   git add file.txt
   git commit -m "Add line3"
   ```

   Now `feature-A` has 3 commits.

---

### Task

Your task is to:

1. **Squash all 3 commits** in `feature-A` into a single commit.
   👉 Hint: `git rebase -i main`

2. **Change the squashed commit message** to:

   ```
   Feature A: add file with 3 lines
   ```

3. **Rebase the branch onto the latest `main`.**

4. Show the new commit history with:

   ```bash
   git log --oneline --graph --decorate
   ```

---

### ✅ Success criteria

* Your branch `feature-A` has **exactly 1 commit** on top of `main`.
* That commit message is:

  ```
  Feature A: add file with 3 lines
  ```

---

Do you want me to also prepare the **expected output of `git log --oneline`** so you can compare after you finish?
