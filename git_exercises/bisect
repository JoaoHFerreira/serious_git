Perfect 👌 — let’s make a **hands-on Git bisect exercise**. This is great for strengthening your base because `git bisect` is one of those “hidden gems” that makes debugging history much faster.

---

# 📝 Exercise: Use `git bisect` to find a bad commit

## 🔹 Setup

1. Create a repo:

   ```bash
   mkdir bisect-demo && cd bisect-demo
   git init
   ```

2. Create an initial file:

   ```bash
   echo "Hello" > app.txt
   git add app.txt
   git commit -m "Initial commit - working app"
   ```

3. Add several commits:

   ```bash
   echo "Feature A" >> app.txt
   git commit -am "Add Feature A (good)"

   echo "Feature B" >> app.txt
   git commit -am "Add Feature B (good)"

   echo "BROKEN" >> app.txt
   git commit -am "Introduce bug (bad commit)"

   echo "Feature C" >> app.txt
   git commit -am "Add Feature C (still broken)"

   echo "Feature D" >> app.txt
   git commit -am "Add Feature D (still broken)"
   ```

Now your history looks like this:

```
Feature D (bad)
Feature C (bad)
Introduce bug (bad)
Feature B (good)
Feature A (good)
Initial commit (good)
```

---

## 🔹 Task

Your job: **find the first bad commit** (the one that introduced `"BROKEN"`) using `git bisect`.

1. Start bisect:

   ```bash
   git bisect start
   git bisect bad   # current HEAD is bad
   git bisect good <hash-of-initial-commit>
   ```

   (You can find the hash of the initial commit with `git log --oneline`.)

2. Git now checks out a commit halfway between.

   * Open `app.txt`.
   * If it contains `"BROKEN"`, mark it bad:

     ```bash
     git bisect bad
     ```
   * If not, mark it good:

     ```bash
     git bisect good
     ```

3. Repeat until Git tells you:

   ```
   <commit-hash> is the first bad commit
   ```

---

## ✅ Success criteria

* `git bisect` identifies the commit *“Introduce bug (bad commit)”* as the first bad one.
* You’ve practiced the workflow: **start → good/bad labeling → result**.

---

⚡️ Bonus challenge: After finishing, run:

```bash
git bisect reset
```

to go back to your branch tip.

---

Would you like me to also make a **scripted test (with `git bisect run`)** so that Git can automatically detect the bug for you instead of you checking manually?
