Perfect 👌 Let’s build a **practice exercise to generate conflicts on purpose** — one with a **merge**, one with a **rebase**.

---

# 📝 Exercise: Practice Git Conflicts

## 🔹 Setup

1. Create a new repo:

   ```bash
   mkdir conflict-demo && cd conflict-demo
   git init
   echo "Hello" > file.txt
   git add file.txt
   git commit -m "Initial commit"
   ```

---

## 🔹 Part 1: Merge conflict

1. Create a branch `feature-merge`:

   ```bash
   git checkout -b feature-merge
   ```

2. Change `file.txt`:

   ```bash
   echo "Feature merge change" > file.txt
   git commit -am "Change line in feature-merge"
   ```

3. Go back to `main` and make a conflicting change:

   ```bash
   git checkout main
   echo "Main branch change" > file.txt
   git commit -am "Change line in main"
   ```

4. Try merging:

   ```bash
   git merge feature-merge
   ```

👉 You’ll get a **merge conflict** because both branches modified the same line.

5. Resolve by editing `file.txt` manually (decide what the final content should be), then:

   ```bash
   git add file.txt
   git commit
   ```

---

## 🔹 Part 2: Rebase conflict

1. Create another branch `feature-rebase` from `main`:

   ```bash
   git checkout -b feature-rebase
   ```

2. Change `file.txt` again:

   ```bash
   echo "Feature rebase change" > file.txt
   git commit -am "Change line in feature-rebase"
   ```

3. Go back to `main` and make another conflicting change:

   ```bash
   git checkout main
   echo "Another main change" > file.txt
   git commit -am "Another conflicting change in main"
   ```

4. Rebase `feature-rebase` onto `main`:

   ```bash
   git checkout feature-rebase
   git rebase main
   ```

👉 You’ll hit a **rebase conflict** (similar to merge conflict but happens while replaying commits).

5. Resolve manually, then:

   ```bash
   git add file.txt
   git rebase --continue
   ```

---

## ✅ Success criteria

* You successfully **trigger a merge conflict** and resolve it.
* You successfully **trigger a rebase conflict** and resolve it.
* You understand:

  * Merge = combines histories, stops on conflicts.
  * Rebase = rewrites history, stops on conflicts during replay.

---

Would you like me to also add a **visual commit diagram** (ASCII style) showing how the conflict arises in each case?
